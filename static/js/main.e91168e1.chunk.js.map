{"version":3,"sources":["redux/auth/constants.js","helpers/auth/authUtils.js","redux/auth/reducers.js","redux/reducers.js","helpers/api.js","redux/auth/actions.js","redux/auth/saga.js","redux/sagas.js","redux/store.js","routes/PrivateRoute.js","pages/home/Home.js","pages/auth/Copyright.js","helpers/auth/formUtils.js","helpers/auth/SnackbarsError.js","helpers/auth/SnackbarsErrorAuthForm.js","pages/auth/LoginForm.js","routes/index.js","pages/auth/Login.js","routes/Routes.js","helpers/fakeBackend.js","App.js","serviceWorker.js","index.js"],"names":["LOGIN_USER","setSession","response","localStorage","setItem","jwt","removeItem","isUserAuthenticated","getItem","resetSession","INIT_STATE","isAuth","error","Auth","state","action","type","payload","combineReducers","form","formReducer","fetchJSON","url","options","fetch","then","status","json","catch","loginUserSuccess","loginUserFailed","login","watchLoginUser","authSaga","username","password","body","JSON","stringify","method","headers","call","put","message","takeEvery","all","fork","rootSaga","getState","sagaMiddleware","createSagaMiddleware","middlewares","PrivateRoute","Component","component","rest","render","props","to","pathname","from","location","useStyles","makeStyles","theme","root","width","marginTop","zIndex","height","overflow","paper","display","justifyContent","alignItems","connect","logout","classes","Container","maxWidth","CssBaseline","className","Button","variant","color","size","onClick","Copyright","Typography","align","Link","href","Date","getFullYear","renderTextField","meta","label","input","margin","custom","hasError","Boolean","touched","TextField","helperText","placeholder","renderCheckbox","name","FormControlLabel","control","Checkbox","checked","value","onChange","required","undefined","useStyles1","backgroundColor","palette","dark","icon","fontSize","iconVariant","opacity","marginRight","spacing","MySnackbarContentWrapper","onClose","other","SnackbarContent","clsx","aria-describedby","id","IconButton","key","aria-label","useStyles2","dispatch","resetMessage","openErrorMessage","handleClose","event","reason","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","flexDirection","avatar","secondary","main","submit","textTransform","reduxForm","initialValues","email","handleSubmit","Avatar","onSubmit","Field","fullWidth","autoComplete","autoFocus","validate","Grid","container","item","xs","SnackbarsErrorAuthForm","Box","mt","allRoutes","path","exact","Home","route","loginUser","values","rememberMe","Route","Routes","routes","map","index","users","realFetch","window","opts","Promise","resolve","reject","setTimeout","endsWith","params","parse","filter","user","length","responseJson","ok","configureFakeBackend","App","hostname","match","ReactDOM","store","initialState","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","reducers","applyMiddleware","run","sagas","configureStore","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e91168e1.chunk.js","sourcesContent":["export const LOGIN_USER = 'LOGIN_USER';\nexport const LOGIN_USER_SUCCESS = 'LOGIN_USER_SUCCESS';\nexport const LOGIN_USER_FAILED = 'LOGIN_USER_FAILED';\nexport const LOGOUT = 'LOGOUT';\nexport const RESET_MESSAGE_ERROR = 'RESET_MESSAGE_ERROR';\n\n","const setSession = response => {\n\tif (response) {\n\t\tlocalStorage.setItem('jwt', response.jwt);\n\t} else {\n\t\tlocalStorage.removeItem('jwt');\n\t}\n};\n\nconst isUserAuthenticated = () => {\n\tconst jwt = localStorage.getItem('jwt');\n\treturn jwt ? true : false;\n};\n\nconst resetSession = () => {\n\tlocalStorage.removeItem('jwt');\n};\n\nexport { setSession, isUserAuthenticated, resetSession };\n","import {\n\tLOGIN_USER_SUCCESS,\n\tLOGIN_USER_FAILED,\n\tLOGOUT,\n\tRESET_MESSAGE_ERROR,\n} from './constants';\n\nimport { isUserAuthenticated } from '../../helpers/auth/authUtils';\n\nconst INIT_STATE = {\n\tisAuth: isUserAuthenticated(),\n\terror: '',\n};\n\n\nconst Auth = (state = INIT_STATE, action) => {\n\tswitch (action.type) {\n\t\tcase LOGIN_USER_SUCCESS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisAuth: true\n\t\t\t};\n\t\tcase LOGIN_USER_FAILED:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\terror: action.payload ,\n\t\t\t\tisAuth: false\n\t\t\t};\n\t\tcase LOGOUT:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisAuth: false,\n\t\t\t\terror: ''\n\t\t\t};\n\t\tcase RESET_MESSAGE_ERROR:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\terror: ''\n\t\t\t};\n\t\tdefault:\n\t\t\treturn { ...state };\n\t}\n};\n\nexport default Auth;\n","import { combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form'\n\nimport Auth from './auth/reducers';\n\nexport default combineReducers({\n\tAuth,\n\tform: formReducer\n});","/**\n * Fetch data from given url\n * @param {*} url\n * @param {*} options\n */\nconst fetchJSON = (url, options = {}) => {\n\treturn fetch(url, options)\n\t.then(response => {\n\t\tif (!response.status === 200) {\n\t\t\tthrow response.json();\n\t\t}\n\t\treturn response.json();\n\t})\n\t.then(json => {\n\t\treturn json;\n\t})\n\t.catch(error => {\n\t\tthrow error;\n\t});\n};\n\nexport { fetchJSON };\n","import {\n\tLOGIN_USER,\n\tLOGIN_USER_SUCCESS,\n\tLOGIN_USER_FAILED,\n\tLOGOUT,\n\tRESET_MESSAGE_ERROR\n} from './constants';\n\n\nexport const loginUser = (username, password) => ({\n\ttype: LOGIN_USER,\n\tpayload: { username, password },\n});\n\nexport const loginUserSuccess = () => ({\n\ttype: LOGIN_USER_SUCCESS,\n});\n\nexport const loginUserFailed = (error) => ({\n\ttype: LOGIN_USER_FAILED,\n\tpayload: error,\n});\n\nexport const logout = () => ({\n\ttype: LOGOUT,\n});\n\nexport const resetMessageError = () => ({\n\ttype: RESET_MESSAGE_ERROR\n});","import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\n\nimport { fetchJSON } from '../../helpers/api';\nimport { LOGIN_USER } from './constants';\nimport { loginUserSuccess, loginUserFailed } from './actions';\nimport { setSession, resetSession } from '../../helpers/auth/authUtils';\n\n/**\n * Login the user\n * @param {*} payload - username and password\n */\nfunction* login({ payload: { username, password } }) {\n\tconst options = {\n\t\tbody: JSON.stringify({ username, password }),\n\t\tmethod: 'POST',\n\t\theaders: { 'Content-Type': 'application/json' },\n\t};\n\n\ttry {\n\t\tconst response = yield call(fetchJSON, '/users/authenticate', options);\n\t\tsetSession(response);\n\t\tyield put(loginUserSuccess());\n\t} catch (error) {\n\t\tlet message;\n\t\tswitch (error.status) {\n\t\t\tcase 500:\n\t\t\t\tmessage = 'Internal Server Error';\n\t\t\t\tbreak;\n\t\t\tcase 401:\n\t\t\t\tmessage = 'Invalid credentials';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tmessage = error;\n\t\t}\n\t\tyield put(loginUserFailed(message));\n\t\tresetSession();\n\t}\n}\n\n\nexport function* watchLoginUser() {\n\tyield takeEvery(LOGIN_USER, login);\n}\n\nfunction* authSaga() {\n\tyield all([fork(watchLoginUser)]);\n}\n\nexport default authSaga;\n","import { all } from 'redux-saga/effects';\nimport authSaga from './auth/saga';\n\nexport default function* rootSaga(getState: any): any {\n\tyield all([authSaga()]);\n}","import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport reducers from './reducers';\nimport sagas from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [sagaMiddleware];\n\nexport function configureStore(initialState: {}) {\n\tconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n\tconst store = createStore(reducers, initialState, composeEnhancers(applyMiddleware(...middlewares)));\n\tsagaMiddleware.run(sagas);\n\treturn store;\n}","import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { Route } from 'react-router-dom';\n\nimport { isUserAuthenticated } from '../helpers/auth/authUtils';\n\nconst PrivateRoute = ({ component: Component, ...rest }) => (\n\t<Route\n\t\t{...rest}\n\t\trender={props => {\n\t\t\tif (!isUserAuthenticated()) {\n\t\t\t\t// not logged in so redirect to login page with the return url\n\t\t\t\treturn <Redirect to={{ pathname: '/login', state: { from: props.location } }} />;\n\t\t\t}\n\n\t\t\t// authorised so return component\n\t\t\treturn <Component {...props} />;\n\t\t}}\n\t/>\n);\n\nexport default PrivateRoute;","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport { logout } from '../../redux/auth/actions';\nimport { resetSession } from '../../helpers/auth/authUtils';\n\nconst useStyles = makeStyles(theme => ({\n\troot: {\n\t\twidth: '100%',\n\t\tmarginTop: 0,\n\t\tzIndex: 1,\n\t\theight: '100%',\n\t\toverflow: 'hidden',\n\t},\n\tpaper: {\n\t\tdisplay: 'flex',\n\t\tjustifyContent: 'center',\n\t\talignItems: 'center',\n\t\theight: '100vh'\n\t},\n}));\n\nconst Home = props => {\n\tconst classes = useStyles();\n\tconst logoutSubmit = () => {\n\t\tprops.logout();\n\t\tresetSession();\n\t};\n\n\treturn (\n\t\t<Container component=\"main\" maxWidth=\"xs\">\n\t\t\t{!props.isAuth && <Redirect to='/login' />}\n\t\t\t<CssBaseline />\n\t\t\t<div className={classes.paper}>\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\tsize=\"large\"\n\t\t\t\t\tonClick={logoutSubmit}\n\t\t\t\t>\n\t\t\t\t\tВыйти\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</Container>\n\t)\n};\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tisAuth: state.Auth.isAuth\n\t}\n};\nexport default connect(mapStateToProps, {logout})(Home);","import React from 'react';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\n\nconst Copyright = () => {\n\treturn (\n\t\t<Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n\t\t\t{'Copyright © '}\n\t\t\t<Link color=\"inherit\" href=\"#\">\n\t\t\t\tВаш сайт\n\t\t\t</Link>{' '}\n\t\t\t{new Date().getFullYear()}\n\t\t\t{'.'}\n\t\t</Typography>\n\t);\n};\n\nexport default Copyright;","import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\n\nconst renderTextField = ({meta, label, input, variant, margin, ...custom}) => {\n\tconst hasError = Boolean(meta.touched && meta.error);\n\treturn (\n\t\t<div>\n\t\t\t<TextField helperText={ hasError && meta.error } error={hasError} label={label} placeholder={label} variant={variant} margin={margin}{...input} {...custom} />\n\t\t</div>\n\t)\n};\n\nconst renderCheckbox = ({ input, label, name, color }) => (\n\t<div>\n\t\t<FormControlLabel\n\t\t\tcontrol={<Checkbox checked={input.value ? true : false} onChange={input.onChange}/>}\n\t\t\tlabel={label}\n\t\t\tname={name}\n\t\t\tcolor={color}\n\t\t/>\n\t</div>\n);\n\nconst required = value => value ? undefined : 'Обязательное поле';\n\nexport {renderTextField, renderCheckbox, required};","import React from \"react\";\nimport clsx from 'clsx';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport CloseIcon from '@material-ui/icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Snackbar from '@material-ui/core/Snackbar';\n\n\nconst useStyles1 = makeStyles(theme => ({\n\terror: {\n\t\tbackgroundColor: theme.palette.error.dark,\n\t},\n\ticon: {\n\t\tfontSize: 20,\n\t},\n\ticonVariant: {\n\t\topacity: 0.9,\n\t\tmarginRight: theme.spacing(1),\n\t},\n\tmessage: {\n\t\tdisplay: 'flex',\n\t\talignItems: 'center',\n\t},\n}));\n\nfunction MySnackbarContentWrapper(props) {\n\tconst classes = useStyles1();\n\tconst { className, message, onClose, variant, ...other } = props;\n\n\treturn (\n\t\t<SnackbarContent\n\t\t\tclassName={clsx(classes[variant], className)}\n\t\t\taria-describedby=\"client-snackbar\"\n\t\t\tmessage={\n\t\t\t\t<span id=\"client-snackbar\" className={classes.message}>\n          <ErrorIcon className={clsx(classes.icon, classes.iconVariant)} />\n\t\t\t\t\t{message}\n        </span>\n\t\t\t}\n\t\t\taction={[\n\t\t\t\t<IconButton key=\"close\" aria-label=\"close\" color=\"inherit\" onClick={onClose}>\n\t\t\t\t\t<CloseIcon className={classes.icon} />\n\t\t\t\t</IconButton>,\n\t\t\t]}\n\t\t\t{...other}\n\t\t/>\n\t);\n}\n\nconst useStyles2 = makeStyles(theme => ({\n\tmargin: {\n\t\tmargin: theme.spacing(1),\n\t},\n}));\n\nexport default function SnackbarsError(props) {\n\tconst classes = useStyles2();\n\tlet openErrorMessage = false;\n\n\tif (props.message) {\n\t\topenErrorMessage = true;\n\t}\n\n\tconst handleClose = (event, reason) => {\n\t\tif (reason === 'clickaway') {\n\t\t\treturn;\n\t\t}\n\t\tprops.resetMessage();\n\t\topenErrorMessage = false;\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<Snackbar\n\t\t\t\tanchorOrigin={{\n\t\t\t\t\tvertical: 'top',\n\t\t\t\t\thorizontal: 'center',\n\t\t\t\t}}\n\t\t\t\topen={openErrorMessage}\n\t\t\t\tautoHideDuration={2000}\n\t\t\t\tonClose={handleClose}\n\t\t\t>\n\t\t\t\t<MySnackbarContentWrapper\n\t\t\t\t\tonClose={handleClose}\n\t\t\t\t\tvariant=\"error\"\n\t\t\t\t\tclassName={classes.margin}\n\t\t\t\t\tmessage={props.message}\n\t\t\t\t/>\n\t\t\t</Snackbar>\n\t\t</div>\n\t);\n}\n\n","import { resetMessageError } from '../../redux/auth/actions';\nimport { connect } from \"react-redux\";\nimport SnackbarsError from './SnackbarsError';\n\nconst mapStateToProps = (state) => ({\n\tmessage: state.Auth.error\n});\nconst mapDispatchToProps = (dispatch) => ({\n\tresetMessage: () => {\n\t\tdispatch(resetMessageError())\n\t}\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SnackbarsError);","import React from 'react'\nimport { Field, reduxForm } from 'redux-form'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n\nimport Copyright from './Copyright';\nimport {renderTextField, renderCheckbox, required} from '../../helpers/auth/formUtils';\nimport SnackbarsErrorAuthForm from '../../helpers/auth/SnackbarsErrorAuthForm';\n\nconst useStyles = makeStyles(theme => ({\n\tpaper: {\n\t\tmarginTop: theme.spacing(20),\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column',\n\t\talignItems: 'center',\n\t},\n\tavatar: {\n\t\tmargin: theme.spacing(1),\n\t\tbackgroundColor: theme.palette.secondary.main,\n\t},\n\tform: {\n\t\twidth: '100%',\n\t\tmarginTop: theme.spacing(1),\n\t},\n\tsubmit: {\n\t\tmargin: theme.spacing(3, 0, 2),\n\t\ttextTransform: 'none'\n\t},\n}));\n\nconst LoginForm = props => {\n\tconst classes = useStyles();\n\tconst { handleSubmit } = props;\n\n\treturn (\n\t\t<Container component=\"main\" maxWidth=\"xs\">\n\t\t\t<CssBaseline />\n\t\t\t<div className={classes.paper}>\n\t\t\t\t<Avatar className={classes.avatar}>\n\t\t\t\t\t<LockOutlinedIcon />\n\t\t\t\t</Avatar>\n\t\t\t\t<Typography component=\"h1\" variant=\"h5\">\n\t\t\t\t\tВход в аккаунт\n\t\t\t\t</Typography>\n\t\t\t\t<form className={classes.form} onSubmit={handleSubmit}>\n\t\t\t\t\t<Field\n\t\t\t\t\t\tcomponent={renderTextField}\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\trequired\n\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\tid=\"email\"\n\t\t\t\t\t\tlabel=\"Почта\"\n\t\t\t\t\t\tname=\"email\"\n\t\t\t\t\t\tautoComplete=\"email\"\n\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\tvalidate={[ required ]}\n\t\t\t\t\t/>\n\t\t\t\t\t<Field\n\t\t\t\t\t\tcomponent={renderTextField}\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\trequired\n\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\tlabel=\"Пароль\"\n\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\tid=\"password\"\n\t\t\t\t\t\tautoComplete=\"current-password\"\n\t\t\t\t\t\tvalidate={[ required ]}\n\t\t\t\t\t/>\n\t\t\t\t\t<Field\n\t\t\t\t\t\tcomponent={renderCheckbox}\n\t\t\t\t\t\tname=\"rememberMe\"\n\t\t\t\t\t\tlabel=\"Запомнить меня\"\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t/>\n\t\t\t\t\t<Button\n\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tclassName={classes.submit}\n\n\t\t\t\t\t>\n\t\t\t\t\t\tВойти в аккаунт\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Grid container>\n\t\t\t\t\t\t<Grid item xs>\n\t\t\t\t\t\t\t<Link href=\"#\" variant=\"body2\">\n\t\t\t\t\t\t\t\tЗабыли пароль?\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t<Grid item>\n\t\t\t\t\t\t\t<Link href=\"#\" variant=\"body2\">\n\t\t\t\t\t\t\t\t{\"Еще нет аккаунта? Регистрация\"}\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Grid>\n\t\t\t\t\t<SnackbarsErrorAuthForm />\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t\t<Box mt={8}>\n\t\t\t\t<Copyright />\n\t\t\t</Box>\n\t\t</Container>\n\t)\n};\n\nexport default reduxForm({\n\tform: 'authForm',\n\tinitialValues: {\n\t\temail: 'test',\n\t\tpassword: 'test'\n\t}\n})(LoginForm)","import { Route } from 'react-router-dom';\n\nimport PrivateRoute from './PrivateRoute';\nimport Home from '../pages/home/Home';\nimport Login from '../pages/auth/Login';\n\nconst rootRoute = {\n\tpath: '/',\n\texact: true,\n\tname: 'Home',\n\tcomponent: Home,\n\troute: PrivateRoute,\n};\n\nconst authRoutes = {\n\tpath: '/login',\n\texact: true,\n\tname: 'Login',\n\tcomponent: Login,\n\troute: Route,\n};\n\nconst allRoutes = [\n\trootRoute,\n\tauthRoutes,\n];\n\nexport {allRoutes};","import React from \"react\";\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport { loginUser } from '../../redux/auth/actions';\nimport LoginForm from './LoginForm';\n\nconst Login = props => {\n\tconst loginFormSubmit = (values) => {\n\t\tprops.loginUser(values.email, values.password, values.rememberMe);\n\t};\n\n\tif (props.isAuth) {\n\t\treturn <Redirect to='/' />\n\t}\n\n\treturn <LoginForm onSubmit={loginFormSubmit} />\n\n};\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tisAuth: state.Auth.isAuth\n\t}\n};\n\nexport default connect(mapStateToProps, {loginUser})(Login);","import React from 'react';\nimport { BrowserRouter, Switch } from 'react-router-dom';\n\nimport { allRoutes as routes } from './index';\n\n\nconst Routes = () => (\n\t<BrowserRouter>\n\t\t<Switch>\n\t\t\t{routes.map((route, index) => {\n\t\t\t\treturn (\n\t\t\t\t\t\t<route.route\n\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\tpath={route.path}\n\t\t\t\t\t\t\texact={route.exact}\n\t\t\t\t\t\t\tcomponent={route.component}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)\n\t\t\t})}\n\t\t</Switch>\n\t</BrowserRouter>\n);\n\nexport default Routes;\n","export function configureFakeBackend() {\n\tlet users = [{ username: 'test', password: 'test', }];\n\tlet realFetch = window.fetch;\n\twindow.fetch = function(url, opts) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\t// wrap in timeout to simulate server api call\n\t\t\tsetTimeout(() => {\n\t\t\t\t// authenticate\n\t\t\t\tif (url.endsWith('/users/authenticate') && opts.method === 'POST') {\n\t\t\t\t\t// get parameters from post request\n\t\t\t\t\tlet params = JSON.parse(opts.body);\n\n\t\t\t\t\t// find if any user matches login credentials\n\t\t\t\t\tlet filteredUsers = users.filter(user => {\n\t\t\t\t\t\treturn user.username === params.username && user.password === params.password;\n\t\t\t\t\t});\n\n\t\t\t\t\tif (filteredUsers.length) {\n\t\t\t\t\t\t// fake jwt token\n\t\t\t\t\t\tlet responseJson = {\n\t\t\t\t\t\t\tjwt: '86',\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresolve({ ok: true, json: () => responseJson });\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// else return error\n\t\t\t\t\t\treject('Неверный логин или пароль!');\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// pass through any requests not handled above\n\t\t\t\trealFetch(url, opts).then(response => resolve(response));\n\t\t\t}, 500);\n\t\t});\n\t};\n}\n","import React from 'react';\nimport Routes from \"./routes/Routes\";\n\nimport { configureFakeBackend } from './helpers/fakeBackend';\n\nconfigureFakeBackend();\nfunction App() {\n  return <Routes />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { configureStore } from './redux/store';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<Provider store={configureStore()}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}